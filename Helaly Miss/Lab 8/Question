Object-Oriented Programming Lab#8, Spring 24 
Today’s Topics 
• Class/Object 
• Inheritance 
• Polymorphism 
• Package 
• ArrayList (under java.util package) 
ArrayLIst: 
Action 
Code
Creating an ArrayList 
ArrayList<T> list = new ArrayList<T>();
Adding element to arraylist 
list.add(T);
Accessing an element at a specific index 
list.get(int index)
Remove an element 
list.remove(T t) – returns true if the item was  there.
Remove an element at an index 
list.remove(int index) – returns the item that  is removed
Size of arraylist 
list.size();



Online Medical Pharmacy Management System 
Develop an Online Medicine Shop Management System which will be used nationwide to help  customer and owner of the Shop to buy/sell drug(medicine) and medical accessories and keep track of  their inventory. The application will have functionalities such as buy/sell medicine, stock in new  medicine, view the list of medicine, view the details of an item. The system will be used by the  owner/employee of the store and customer. To keep the application simple, we will consider only 2  types of items in the store medicine/drug and medical accessories. The application will have the  following functionalities. 
Owner/Employee: 
• Log in/out 
• Add a medicine. 
• Add an accessory. 
• View order requests. 
• Accept/Complete an order. 
• Search for items (medicines, accessories, both). 
• Find expired medicines. 
Customer Menu: 
• Login/logout  
• Request an order. 
• Search for items.
• View details of their order. 
• Pay the bill. 
What you need to do: (Note: Do not use default package) 
Create a Project name MedLibrary (and do the following) 
Note: All dates should use “dd/MM/yyyy” format. 
1. Create an abstract class named Item under med.lib package. 
a. Add following private attributes;  
name (String type), id(String type), manufacturer (String type), unitPrice (double type),  and quantity (int type) 
b. Add parameterized constructor- Constructor: pass name, manufacturer, unitPrice, and  quantity, and initialize the respective attributes. Also set id to a random 4-digit number.  c. Add the following methods: 
i. protected void addPrefixCodeToId(String prefix) - Adds a prefix to the id  attribute. 
ii. Getter methods for all attributes. 
iii. Setter methods for all attributes except id. 
iv. public void increaseQuantity(int increasedAmt) - Increases the quantity by a  increasedAmt amount. 
v. public boolean decreaseQuantity(int decreasedAmt) - Decreases the quantity  by a specified amount if there is enough stock. Returns true if successful,  
otherwise false. 
vi. Override public String toString() - Returns a string concatenating the values of  all attributes. 
vii. Override public double getBill() - Returns the total cost, calculated by  multiplying quantity by unitPrice. 
2. Create a class named Medicine, a subclass of Item class, under the med.lib package. a. Add the following private attributes: 
i. dose (double type) 
ii. unit (String type) 
iii. expirationDate (LocalDate type) 
b. Add following parameterized constructors. 
i. public Medicine(String name, String manufacturer, double dose, String unit,  double unitPrice, int quantity, LocalDate expirationDate) - Call parent  
constructor, assign the rest of the attributes with respective parameters. Also add  prefix "M-" with the id using addPrefixCodeToId(...) method. 
ii. public Medicine(String name, String manufacturer, double dose, String unit,  double unitPrice, int quantity, String expirationDate) - Call parent constructor, 
assign the rest of the attributes with respective parameters. Also add prefix "M-" with  the id using addPrefixCodeToId(...) method. You need to convert expirationDate  parameter to LocalDate before assigning to expirationDate attribute. Here is the code  to do the conversion  
DateTimeFormatter format =DateTimeFormatter.ofPattern("dd/MM/yyyy"); LocalDate date = LocalDate.parse(expirationDate, format); this.expirationDate = date; 
c. Add the following methods: 
i. getter method for all attributes 
ii. public boolean hasExpired() - Checks if the expirationDate has passed by comparing it  with the current date. Returns true if expired; otherwise, returns false. 
return LocalDate.now().compareTo(getExpirationDate())<0; 
iii. Override public String toString() - Call parent’s toString() and concatenate the value of  the attributes and return the concatenated string. 
Code to convert LocalDate to String: 
DateTimeFormatter format =DateTimeFormatter.ofPattern("dd/MM/yyyy");  String expDate = expirationDate.format(format); 
3. . Create a class named MedicalAccessory, a subclass of Item class, under the med.lib package. a. Add the following private attributes: 
i. modelNo (String type) 
ii. hasDiscount (boolean type) 
b. Add a parameterized constructor. 
i. public MedicalAccessory(String name, String manufacturer, String modelNo, double  unitPrice, int quantity) - initialize the respective attributes. Also, add the prefix "MA- " to id. 
c. Add the following methods: 
i. getter/setter method for the attributes 
ii. Override public String toString() – Call parent’s toString() and concatenate the  value of the attributes and return the concatenated string. 
iii. Override public double getBill() - Returns the total bill, applying a 10% discount if  hasDiscount() is true. Otherwise, it returns the regular bill from the superclass. 
4. Create a class named Order under the med.lib package. 
a. Add the following private attributes: orderId (String type), itemId (String type), orderBy (String type), quantity (int type), status (String type), orderDate (LocalDate type),  deliveryDate (LocalDate type)
b. Add a parameterized constructor - Constructor: pass itemId, orderBy, and quantity, and  initialize the respective attributes. Also, generate a random orderId using the prefix "O-" and  set the initial status to "New" and the orderDate to the current date (LocalDate.now()). c. Add the following methods: 
i. Getter methods for all attributes. Setter method for status. 
ii. Override public String toString() - Returns a string representation of the Order  object, including formatted orderDate and deliveryDate. 
iii. public void complateOrder() – set the status to “complete” and deliveryDate to  LocalDate.now() 
5. Create a class name MedPharma under med.lib package. 
a. Add 3 attributes; name (String type) and items (ArrayList of Item type), requestedItems  (ArrayList of order type). 
b. Add a parameterized constructor - pass a parameter for name and initialize the respective  attribute.  
c. Add the following methods:  
i. public Item findItem(String id) - Searches for an item in the items list using the  id. If found, returns the Item object; otherwise, returns null. 
ii. public Order findOrder(String orderId) - Searches for an order in the  requestedItems list using orderId and checks that its status is not "complete". If  found, returns the Order object; otherwise, returns null. 
iii. public ArrayList<Medicine> findItems(String name, String manufacturer,  double dose, String unit, double unitPrice, String expirationDate) - Finds all  Medicine items that match the specified parameters in items and returns them in an  ArrayList. 
iv. public ArrayList<Medicine> findExpiredMeds() - Finds and returns all expired  Medicine items in the items list. 
v. public ArrayList<MedicalAccessory> findItems(String name, String  manufacturer, String modelNo, double unitPrice) - Finds all MedicalAccessory  items that match the specified parameters in items and returns them in an  
ArrayList. 
vi. public ArrayList<Item> findItems(String name, String manufacturer) - Finds  all items matching name and manufacturer in the items list and returns them in an  ArrayList. 
vii. public String addItem(String name, String manufacturer, double dose, String  unit, double unitPrice, int quantity, String expirationDate) - Adds a Medicine  item if it doesn’t already exist in items. If it exists, increases the quantity of the  existing item. Returns the item ID. 
viii. public String addItem(String name, String manufacturer, String modelNo,  double unitPrice, int quantity) - Adds a MedicalAccessory item if it doesn’t  already exist in items. If it exists, increases the quantity of the existing item. 
Returns the item ID. 
ix. public boolean acceptOrderRequest(String orderId) - Finds an order by orderId  and decreases the stock of the corresponding item by the order quantity. If  
successful, marks the order as complete. 
x. public String orderItem(String medId, String customerContact, int quantity) - Creates a new order for an item using medId, customerContact, and quantity, and  adds it to requestedItems. Returns the order ID. 
xi. public ArrayList<Order> getMyOrder(String customerContact) - Returns all  orders in requestedItems placed by the specified customer. 
xii. public ArrayList<Order> getNewOrders() - Finds and returns all orders in  requestedItems with a status of "new". 
Create another Project name MedPharmaApp (and do the following) 
1. Add a project reference to the MedPharmaLib project. 
2. Now create class “PharmaApp” under the package med.app which should contain the main Create the class MedPharmaApp under the package med.app that contains the main method. In  
the main method: 
i. Create an object of MedPharma class and call it pharma. 
ii. Provide a menu as described below. Once the user enters their option, read the value  and take the appropriate action using the MedPharma object. 
Menu: 
 Enter 1 to login as employee, 2 as customer, 3 to switch role, 0 to exit. 
Employee Menu: 
 Enter 1 to add a medicine. 
 Enter 2 to add an accessory. 
 Enter 3 to view order requests. 
 Enter 4 to accept an order. 
 Enter 5 to search for items (medicines, accessories, both). 
 Enter 6 to find expired medicines. 
 Enter 0 to logout. 
Customer Menu: 
 Enter 1 to request an order. 
 Enter 2 to search for items. 
 Enter 3 to view details of their order.
 Enter 4 to pay the bill.  Enter 0 to logout.
