#include <stdio.h>

// Utility function to return max of two integers
int max(int a, int b) {
    return (a > b) ? a : b;
}

// Main knapsack function
int knapSack(int W, int value[], int weight[], int n) {
    int dp[n + 1][W + 1]; // DP table

    // Build dp[][] in bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int k = 0; k <= W; k++) {
            if (i == 0 || k == 0)
                dp[i][k] = 0; // Base case: 0 items or 0 capacity
            else if (weight[i - 1] <= k)
                dp[i][k] = max(
                    value[i - 1] + dp[i - 1][k - weight[i - 1]],  // Include item
                    dp[i - 1][k]                                 // Exclude item
                );
            else
                dp[i][k] = dp[i - 1][k]; // Item too heavy to include
        }
    }

    return dp[n][W]; // Maximum value possible
}

int main() {
    int value[] = {15, 10, 9, 5};
    int weight[] = {1, 5, 3, 4};
    int W = 8; // Total weight capacity

    int n = sizeof(value) / sizeof(value[0]);

    int result = knapSack(W, value, weight, n);
    printf("Maximum Value: %d\n", result);

    return 0;
}
