#include <stdio.h>
#include <stdlib.h>

// Comparator function to sort edges by weight
int comparator(const void* p1, const void* p2)
{
    const int(*x)[3] = p1;
    const int(*y)[3] = p2;

    return (*x)[2] - (*y)[2];
}

// Initialize disjoint sets (parent and rank)
void makeSet(int parent[], int rank[], int n)
{
    for (int i = 0; i < n; i++) {
        parent[i] = i;
        rank[i] = 0;
    }
}

// Find set representative with path compression
int findParent(int parent[], int component)
{
    if (parent[component] == component)
        return component;

    return parent[component] = findParent(parent, parent[component]);
}

// Union by rank
void unionSet(int u, int v, int parent[], int rank[])
{
    u = findParent(parent, u);
    v = findParent(parent, v);

    if (rank[u] < rank[v]) {
        parent[u] = v;
    }
    else if (rank[u] > rank[v]) {
        parent[v] = u;
    }
    else {
        parent[v] = u;
        rank[u]++;
    }
}

// Kruskal's MST algorithm
void kruskalAlgo(int V, int E, int edge[][3])
{
    // Sort edges by weight
    qsort(edge, E, sizeof(edge[0]), comparator);

    int parent[V];
    int rank[V];
    makeSet(parent, rank, V);

    int minCost = 0;

    printf("Edges in the Minimum Spanning Tree:\n");
    for (int i = 0; i < E; i++) {
        int u = findParent(parent, edge[i][0]);
        int v = findParent(parent, edge[i][1]);
        int wt = edge[i][2];

        // If including this edge doesn't form a cycle
        if (u != v) {
            unionSet(u, v, parent, rank);
            minCost += wt;
            printf("%d -- %d == %d\n", edge[i][0], edge[i][1], wt);
        }
    }

    printf("Total weight of MST: %d\n", minCost);
}

int main()
{
    int edge[5][3] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    int V = 4; // number of vertices
    int E = 5; // number of edges

    kruskalAlgo(V, E, edge);

    return 0;
}
