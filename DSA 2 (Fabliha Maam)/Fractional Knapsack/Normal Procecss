#include <bits/stdc++.h>
using namespace std;

// Structure to represent an item with profit and weight
struct Item {
    int profit, weight;

    // Constructor
    Item(int profit, int weight) {
        this->profit = profit;
        this->weight = weight;
    }
};

// Comparator function to sort items by decreasing profit/weight ratio
bool cmp(Item a, Item b) {
    double r1 = (double)a.profit / a.weight;
    double r2 = (double)b.profit / b.weight;
    return r1 > r2;
}

// Function to get the maximum total value in the knapsack
double fractionalKnapsack(int C, Item arr[], int N) {
    // Sort items by profit/weight ratio
    sort(arr, arr + N, cmp);

    double finalValue = 0.0;

    for (int i = 0; i < N; i++) {
        if (arr[i].weight <= C) {
            // Take the whole item
            C -= arr[i].weight;
            finalValue += arr[i].profit;
        } else {
            // Take the fractional part
            finalValue += arr[i].profit * ((double)C / arr[i].weight);
            break;
        }
    }

    return finalValue;
}

int main() {
    int C = 50; // Capacity of knapsack
    Item arr[] = { {60, 10}, {100, 20}, {120, 30} };
    int N = sizeof(arr) / sizeof(arr[0]);

    // Output the result
    cout << "Maximum Profit = " << fractionalKnapsack(C, arr, N) << endl;

    return 0;
}
