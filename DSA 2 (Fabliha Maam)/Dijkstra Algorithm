#include <limits.h>
#include <stdbool.h>
#include <stdio.h>

#define V 5

// Function to find vertex with minimum distance
int minDistance(int dist[], bool visited[])
{
    int min_value = INT_MAX;
    int min_node = -1;

    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min_value) {
            min_value = dist[v];
            min_node = v;
        }
    }

    return min_node;
}

void printSolution(int dist[])
{
    printf("Vertex \t Distance from Source\n");
    for (int i = 0; i < V; i++) {
        if(dist[i] == INT_MAX)
            printf("%d \t\t %s\n", i, "INF");
        else
            printf("%d \t\t %d\n", i, dist[i]);
    }
}

void dijkstra(int graph[V][V], int src)
{
    int dist[V];
    bool visited[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        if(u == -1) break;  // No reachable vertex left
        visited[u] = true;

        for (int v = 0; v < V; v++) {
            // Relaxation step
            if (!visited[v] && graph[u][v] != 0 && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printSolution(dist);
}

int main()
{
    int graph[V][V] = {
        // 0  1  2  3  4
        { 0, 6, 0, 1, 0 },  // edges from vertex 0
        { 6, 0, 5, 2, 2 },  // edges from vertex 1
        { 0, 5, 0, 0, 5 },  // edges from vertex 2
        { 1, 2, 0, 0, 1 },  // edges from vertex 3
        { 0, 2, 5, 1, 0 }   // edges from vertex 4
    };

    int source = 0;
    dijkstra(graph, source);

    return 0;
}
