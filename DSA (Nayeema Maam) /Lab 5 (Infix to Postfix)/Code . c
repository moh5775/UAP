#include <stdio.h>
#include <string.h>
#include <ctype.h> // Include this for isalnum() and other character functions

#define max 100 // Define the maximum size for the stack and expressions

char stack[max];
int top = -1;

void infixToPostfix(char* infix, char* postfix);
void push(char x);
char pop();
int precedence(char x);
int isOperator(char x);

int main()
{
    char infix[max], postfix[max];
    printf("Enter infix expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strcspn(infix, "\n")] = 0;  // Remove the newline character
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
}

void infixToPostfix(char* infix, char* postfix)
{
    int i, j = 0;
    for (i = 0; infix[i] != '\0'; i++)
    {
        char ch = infix[i];
        if (isalnum(ch)) // If the character is an alphanumeric (digit or letter)
        {
            {
                postfix[j++] = ch; // Add it directly to the postfix expression
                postfix[j++] = ' '; // Add space after every character
            }
        }
        else if (ch == '(') // If the character is an opening parenthesis
        {
            push(ch); // Push it onto the stack
        }
        else if (ch == ')')
        {
            // If the character is a closing parenthesis
            // Pop from the stack until an opening parenthesis is encountered
            while (top != -1 && stack[top] != '(')
            {
                postfix[j++] = pop(); // Add the popped operators to postfix
                postfix[j++] = ' '; // Add space after every character
            }
            pop();  // Pop the '(' from the stack (but don't add to postfix)
        }
        else if (isOperator(ch))
        {
            // If the character is an operator
            // Pop operators from stack while they have greater or equal precedence
            while (top != -1 && precedence(ch) <= precedence(stack[top]))
            {
                postfix[j++] = pop(); // Add popped operator to postfix
                postfix[j++] = ' '; // Add space after every character
            }
            push(ch); // Push the current operator onto the stack
        }
    }
    // Pop all remaining operators from the stack and add them to postfix
    while (top != -1)
    {
        postfix[j++] = pop();
        postfix[j++] = ' '; // Add space after every character
    }
    postfix[j] = '\0';  // Overwrite the last space with a null terminator
}

void push(char x)
{
    if (top == max - 1)
    {
        printf("Stack overflow\n");
    }
    else
    {
        stack[++top] = x;  // Increment top and then push
    }
}

char pop()
{
    if (top == -1)
    {
        printf("Stack underflow\n");
        return -1;
    }
    else
    {
        return stack[top--];  // Return top element and then decrement
    }
}

int precedence(char x)
{
    if (x == '+' || x == '-')
    {
        return 1;
    }
    else if (x == '*' || x == '/' || x == '%')
    {
        return 2;
    }
    else if (x == '^')
    {
        return 3;
    }
    return 0;  // Return 0 if the character is not an operator
}

int isOperator(char x)
{
    if (x == '+' || x == '-' || x == '*' || x == '/' || x == '%' || x == '^')
    {
        return 1;
    }
    return 0;
}
